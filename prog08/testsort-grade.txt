"Castellucci,Michael James" <mjc715@miami.edu>
prog08.InsertionSort@659e0bfd on array of length 30
25.083 microseconds. Constant : 0.02787
0 28 19 17 5 23 11 21 9 14 17 17 23 22 5 14 4 15 11 20 13 18 14 17 2 10 3 22 12 23 
0 2 3 4 5 5 9 10 11 11 12 13 14 14 14 15 17 17 17 17 18 19 20 21 22 22 23 23 23 28 
prog08.InsertionSort@659e0bfd on array of length 100
198.625 microseconds. Constant : 0.0198625
prog08.InsertionSort@659e0bfd on array of length 1000
2878.833 microseconds. Constant : 0.002878833
prog08.InsertionSort@659e0bfd on array of length 10000
54611.709 microseconds. Constant : 5.4611709E-4
prog08.InsertionSort@659e0bfd on array of length 10000
48072.167 microseconds. Constant : 4.8072167E-4
prog08.InsertionSort@659e0bfd on array of length 10000
48005.875 microseconds. Constant : 4.8005875E-4
prog08.InsertionSort@659e0bfd on array of length 100000
7793096.041 microseconds. Constant : 7.793096041E-4

prog08.HeapSort@659e0bfd on array of length 30
64.625 microseconds. Constant : 1.4583546609892215
0 28 19 17 5 23 11 21 9 14 17 17 23 22 5 14 4 15 11 20 13 18 14 17 2 10 3 22 12 23 
0 2 3 4 5 5 9 10 11 11 12 13 14 14 14 15 17 17 17 17 18 19 20 21 22 22 23 23 23 28 
prog08.HeapSort@659e0bfd on array of length 10000
6082.083 microseconds. Constant : 0.15205207499999998
prog08.HeapSort@659e0bfd on array of length 100000
21469.875 microseconds. Constant : 0.04293975
prog08.HeapSort@659e0bfd on array of length 1000000
362071.958 microseconds. Constant : 0.06034532633333333
prog08.HeapSort@659e0bfd on array of length 1000000
347414.791 microseconds. Constant : 0.057902465166666674
prog08.HeapSort@659e0bfd on array of length 1000000
340000.834 microseconds. Constant : 0.05666680566666666
prog08.HeapSort@659e0bfd on array of length 10000000
9905146.542 microseconds. Constant : 0.14150209345714285

prog08.QuickSort@2a139a55 on array of length 30
23.917 microseconds. Constant : 0.5397209814604134
0 28 19 17 5 23 11 21 9 14 17 17 23 22 5 14 4 15 11 20 13 18 14 17 2 10 3 22 12 23 
0 2 3 4 5 5 9 10 11 11 12 13 14 14 14 15 17 17 17 17 18 19 20 21 22 22 23 23 23 28 
prog08.QuickSort@2a139a55 on array of length 10000
2500.291 microseconds. Constant : 0.062507275
prog08.QuickSort@2a139a55 on array of length 100000
29680.5 microseconds. Constant : 0.059361
prog08.QuickSort@2a139a55 on array of length 1000000
159626.584 microseconds. Constant : 0.026604430666666668
prog08.QuickSort@2a139a55 on array of length 1000000
147313.333 microseconds. Constant : 0.02455222216666667
prog08.QuickSort@2a139a55 on array of length 1000000
147637.875 microseconds. Constant : 0.0246063125
prog08.QuickSort@2a139a55 on array of length 10000000
2326772.667 microseconds. Constant : 0.033239609528571426

prog08.MergeSort@659e0bfd on array of length 30
29.5 microseconds. Constant : 0.6657092843200315
0 28 19 17 5 23 11 21 9 14 17 17 23 22 5 14 4 15 11 20 13 18 14 17 2 10 3 22 12 23 
0 2 3 4 5 5 9 10 11 11 12 13 14 14 14 15 17 17 17 17 18 19 20 21 22 22 23 23 23 28 
prog08.MergeSort@659e0bfd on array of length 10000
3561.709 microseconds. Constant : 0.08904272499999999
prog08.MergeSort@659e0bfd on array of length 100000
28173.375 microseconds. Constant : 0.05634675
prog08.MergeSort@659e0bfd on array of length 1000000
258411.25 microseconds. Constant : 0.04306854166666667
prog08.MergeSort@659e0bfd on array of length 1000000
201511.125 microseconds. Constant : 0.0335851875
prog08.MergeSort@659e0bfd on array of length 1000000
198931.708 microseconds. Constant : 0.033155284666666666
prog08.MergeSort@659e0bfd on array of length 10000000
3201455.959 microseconds. Constant : 0.045735085128571426

    double constant = ((time2 - time1)/1000.0) / sorter.O(array.length);
        return false;
    return true;
    // If the two arrays have different lengths, return false.
      return false;
    // same integer in both maps.  If not, return false.
        return false;
    return true;
  public double O (int n) { return Math.pow(n,2); }
    return n * Math.log10(n); }
    return j;
  private int compare (int i, int j) { return array[j].compareTo(array[i]); }
  private int left (int i) { return 2 * i + 1; }
  private int right (int i) { return 2 * i + 2; }
  private int parent (int i) { return (i - 1) / 2; }
  private boolean isValid (int i) { return 0 <= i && i < size; }
  public double O (int n) { return n * Math.log10(n); }
      return;
  public double O (int n) { return n * Math.log10(n); }
      return;

SCORE: 60/60
